/**  This is the simplest possible use of ScalaMeter.
  *  It allows running ScalaMeter benchmarks as part of the test suite.
  *  It means, that when the test command is run, ScalaMeter benchmarks are run along
  *  the tests from other test frameworks, such as ScalaTest or ScalaCheck.
  */
lazy val basic = Project(
  "bitFlip",
  file("."),
  settings = Defaults.coreDefaultSettings ++ Seq(
    name := "bitFlip",
    organization := "com.claydonkey",
    scalaVersion := "2.10.6",
    scalacOptions ++= Seq("-deprecation", "-unchecked", "-feature", "-Xlint"),
    publishArtifact := false,
    libraryDependencies ++= Seq(
      //"com.storm-enroute" %% "scalameter" % version.value % "test" withSources() withJavadoc(),
     "org.scalatest" %% "scalatest" % "3.0.0" % "test",
      "com.storm-enroute" %% "scalameter-core"  % version.value % "test" withSources() withJavadoc(),
       "org.scala-tools.testing" % "test-interface" % "0.5"
    ),
    resolvers ++= Seq(
      "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots",
      "Sonatype OSS Releases" at "https://oss.sonatype.org/content/repositories/releases"
    ),
    testFrameworks += new TestFramework("org.scalameter.ScalaMeterFramework"),
    parallelExecution in Test := false,
    logBuffered := false
  )
)
